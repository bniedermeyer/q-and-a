/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
export namespace Components {
  interface QAndA {
    /**
     * The endpoint that questions/upvotes will be posted to. Defaults to `/ask` if not defined
     */
    askEndpoint: string;
    /**
     * The correlation id of the q-and-a session. If present, will be sent with questions and used to retrieve questions by appending a `correlationId` query parameter to the `retrieveEndpoint` url. A good use case for this property is to track which talk is being given at a time. This way you can only display questions relevant to the current talk.
     */
    correlationId: string;
    /**
     * The interval in which the questions should be fetched in ms. Defaults to 10000ms (10 seconds).
     */
    pollingInterval: number;
    /**
     * Primary color. Used mainly for button borders. Defaults to #10915b
     */
    primaryColor: string;
    /**
     * The endpoint the list of questions will be retrieved from. Defaults to `/questions` if not defined
     */
    retrieveEndpoint: string;
    /**
     * Secondary color. Used for question and header text color. Defaults to  #112378
     */
    secondaryColor: string;
    /**
     * The optional id of the user asking a question. Will be sent with the question if present.
     */
    userId: string;
  }
  interface QaQuestionForm {}
}
declare global {
  interface HTMLQAndAElement extends Components.QAndA, HTMLStencilElement {}
  var HTMLQAndAElement: {
    prototype: HTMLQAndAElement;
    new (): HTMLQAndAElement;
  };
  interface HTMLQaQuestionFormElement extends Components.QaQuestionForm, HTMLStencilElement {}
  var HTMLQaQuestionFormElement: {
    prototype: HTMLQaQuestionFormElement;
    new (): HTMLQaQuestionFormElement;
  };
  interface HTMLElementTagNameMap {
    'q-and-a': HTMLQAndAElement;
    'qa-question-form': HTMLQaQuestionFormElement;
  }
}
declare namespace LocalJSX {
  interface QAndA {
    /**
     * The endpoint that questions/upvotes will be posted to. Defaults to `/ask` if not defined
     */
    askEndpoint?: string;
    /**
     * The correlation id of the q-and-a session. If present, will be sent with questions and used to retrieve questions by appending a `correlationId` query parameter to the `retrieveEndpoint` url. A good use case for this property is to track which talk is being given at a time. This way you can only display questions relevant to the current talk.
     */
    correlationId?: string;
    /**
     * The interval in which the questions should be fetched in ms. Defaults to 10000ms (10 seconds).
     */
    pollingInterval?: number;
    /**
     * Primary color. Used mainly for button borders. Defaults to #10915b
     */
    primaryColor?: string;
    /**
     * The endpoint the list of questions will be retrieved from. Defaults to `/questions` if not defined
     */
    retrieveEndpoint?: string;
    /**
     * Secondary color. Used for question and header text color. Defaults to  #112378
     */
    secondaryColor?: string;
    /**
     * The optional id of the user asking a question. Will be sent with the question if present.
     */
    userId?: string;
  }
  interface QaQuestionForm {}
  interface IntrinsicElements {
    'q-and-a': QAndA;
    'qa-question-form': QaQuestionForm;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'q-and-a': LocalJSX.QAndA & JSXBase.HTMLAttributes<HTMLQAndAElement>;
      'qa-question-form': LocalJSX.QaQuestionForm & JSXBase.HTMLAttributes<HTMLQaQuestionFormElement>;
    }
  }
}
